---
# Configure Hyrax

# Install required packages

- name: Install ImageMagick
  package:
    name: "{{ imagemagick_package }}"
    state: present

- name: Install LibreOffice
  package:
    name: libreoffice
    state: present

- name: Install postgresql devel package
  package:
    name: "{{ postgresql_devel_package }}"
    state: present

- name: Install sqlite devel package
  package:
    name: "{{ sqlite_devel_package }}"
    state: present

# Hyrax groundwork

- name: Create the hyrax user
  user:
    name: hyrax
    system: yes
    home: /var/www/hyrax
    createhome: no

- name: Create the puma user
  user:
    name: puma
    system: yes
    home: /var/www/hyrax
    createhome: no
    shell: /sbin/nologin

- name: Create the Hyrax parent directory
  file:
    path: /var/www/hyrax
    state: directory
    owner: hyrax
    group: puma
    mode: u=rwX,g=rwX,o=rX

- name: Gem install rails
  command: "/usr/local/bin/gem install rails --version={{ rails_version }}"
  args:
    creates: "/usr/local/bin/rails"

- name: Create the Hyrax project
  command: /usr/local/bin/rails new hyrax-root --skip-bundle
  args:
    chdir: /var/www/hyrax
    creates: /var/www/hyrax/hyrax-root/Gemfile
  become: yes
  become_user: hyrax

- name: Use local path for bundle
  command: /usr/local/bin/bundle config --local path vendor/bundle
  args:
   chdir: /var/www/hyrax/hyrax-root
   creates: /var/www/hyrax/hyrax-root/.bundle/config
  become: yes
  become_user: hyrax

- name: Add Hyrax to Gemfile
  command: "/usr/local/bin/bundle add hyrax --version={{ hyrax_version }}"
  args:
    chdir: /var/www/hyrax/hyrax-root
  become: yes
  become_user: hyrax
  changed_when: False

- name: Add pg to Gemfile
  command: /usr/local/bin/bundle add pg --version="~> 1.0"
  args:
    chdir: /var/www/hyrax/hyrax-root
  become: yes
  become_user: hyrax
  changed_when: False

- name: Downgrade sqlite3 gem in Gemfile
  lineinfile:
    path: /var/www/hyrax/hyrax-root/Gemfile
    regexp: "^gem 'sqlite3'"
    line: "gem 'sqlite3', '~> 1.3.0'"

- name: Bundle update sqlite3 to finalize downgrade
  command: /usr/local/bin/bundle update sqlite3
  args:
    chdir: /var/www/hyrax/hyrax-root
  become: yes
  become_user: hyrax
  changed_when: False

- name: Add sidekiq to Gemfile
  command: /usr/local/bin/bundle add sidekiq --version="~> 5.1"
  args:
    chdir: /var/www/hyrax/hyrax-root
  become: yes
  become_user: hyrax
  changed_when: False

- name: Add hydra-role-management to Gemfile
  command: /usr/local/bin/bundle add hydra-role-management --version="~> 1.0"
  args:
    chdir: /var/www/hyrax/hyrax-root
  become: yes
  become_user: hyrax
  changed_when: False

- name: Run bundle install
  command: /usr/local/bin/bundle install
  args:
    chdir: /var/www/hyrax/hyrax-root
  become: yes
  become_user: hyrax
  changed_when: False

- name: Create the Hyrax database
  postgresql_db:
    name: hyrax
    state: present
  become: yes
  become_user: postgres

- name: Add Fedora 4 database user
  postgresql_user:
    db: hyrax
    name: hyrax
    password: "{{ hyrax_postgresqldatabase_user_password }}"
    encrypted: yes
    priv: ALL
    state: present
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true

- name: Get the location of the pg_hba.conf file
  command: psql -t -P format=unaligned -c 'show hba_file'
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  register: hba_file
  changed_when: false

- name: Allow hyrax user to connect to postgresl using password auth
  blockinfile:
    path: "{{ hba_file.stdout }}"
    insertafter: "^# TYPE  DATABASE        USER            ADDRESS                 METHOD"
    marker: "# {mark} Ansible Managed - Allow hyrax user to connect using md5 auth"
    block: |
      host    hyrax           hyrax           127.0.0.1/32            md5
  notify: restart postgresql

- name: Run handlers to restart postgresql if needed
  meta: flush_handlers

- name: Copy database.yml configuration
  copy:
    src: database.yml
    dest: /var/www/hyrax/hyrax-root/config/database.yml
    owner: hyrax
    group: puma
    mode: u=r,g=r,o=

# Run rails commands to install Hyrax

- name: Run rails generate hyrax:install
  command: /usr/local/bin/bundle exec rails generate hyrax:install -f
  args:
    chdir: /var/www/hyrax/hyrax-root
  become: yes
  become_user: hyrax
  environment:
    SECRET_KEY_BASE: "{{ hyrax_secret_key_base }}"
    HYRAX_POSTGRESQL_PASSWORD: "{{ hyrax_postgresqldatabase_user_password }}"
    RAILS_ENV: production

- name: Run rails generate roles
  command: /usr/local/bin/bundle exec rails generate roles
  args:
    chdir: /var/www/hyrax/hyrax-root
  become: yes
  become_user: hyrax
  environment:
    SECRET_KEY_BASE: "{{ hyrax_secret_key_base }}"
    HYRAX_POSTGRESQL_PASSWORD: "{{ hyrax_postgresqldatabase_user_password }}"
    RAILS_ENV: production

- name: Run rails generate hyrax:riiif
  command: /usr/local/bin/bundle exec rails generate hyrax:riiif
  args:
    chdir: /var/www/hyrax/hyrax-root
    creates: /var/www/hyrax/hyrax-root/config/initializers/riiif.rb
  become: yes
  become_user: hyrax
  environment:
    SECRET_KEY_BASE: "{{ hyrax_secret_key_base }}"
    HYRAX_POSTGRESQL_PASSWORD: "{{ hyrax_postgresqldatabase_user_password }}"
    RAILS_ENV: production

# Filesystem changes

- name: Ensure log file is created and writeable
  file:
    path: /var/www/hyrax/hyrax-root/log/production.log
    state: touch
    owner: hyrax
    group: puma
    mode: u=rw,g=rw,o=
  changed_when: False

- name: Copy puma.rb configuration file
  copy:
    src: puma.rb
    dest: /var/www/hyrax/hyrax-root/config/puma.rb
    owner: hyrax
    group: hyrax
    mode: a=r

- name: Copy ability.rb configuration file
  copy:
   src: ability.rb
   dest: /var/www/hyrax/hyrax-root/app/models/ability.rb
   owner: hyrax
   group: hyrax
   mode: a=r

- name: Copy fedora.yml configuration file
  copy:
    src: fedora.yml
    dest: /var/www/hyrax/hyrax-root/config/fedora.yml
    owner: hyrax
    group: hyrax
    mode: a=r

- name: Copy blacklight.yml to solr.yml
  copy:
    remote_src: yes
    src: /var/www/hyrax/hyrax-root/config/blacklight.yml
    dest: /var/www/hyrax/hyrax-root/config/solr.yml

- name: Copy hyrax production configuration file
  template:
    src: production.rb
    dest: /var/www/hyrax/hyrax-root/config/environments/production.rb
    owner: hyrax
    group: hyrax
    mode: a=r

- name: Copy hyrax.db initializer configuration file
  template:
    src: hyrax.rb
    dest: /var/www/hyrax/hyrax-root/config/initializers/hyrax.rb
    owner: hyrax
    group: puma
    mode: u=r,g=r,o=

- name: Remove unneeded database migration
  shell: rm /var/www/hyrax/hyrax-root/db/migrate/*_add_devise_to_users.rb
  args:
    warn: False
  register: rm_migration_cmd
  changed_when: rm_migration_cmd.rc == 0
  failed_when: False

- name: Run db migrate
  command: /usr/local/bin/bundle exec rails db:migrate
  args:
    chdir: /var/www/hyrax/hyrax-root
  become: yes
  become_user: hyrax
  environment:
    SECRET_KEY_BASE: "{{ hyrax_secret_key_base }}"
    HYRAX_POSTGRESQL_PASSWORD: "{{ hyrax_postgresqldatabase_user_password }}"
    RAILS_ENV: production

- name: Run the assets precompiler
  command: /usr/local/bin/bundle exec rails assets:precompile
  args:
    chdir: /var/www/hyrax/hyrax-root
  become: yes
  become_user: hyrax

- name: Create solr core
  command: /opt/solr/bin/solr create_core -c blacklight-core -d /var/www/hyrax/hyrax-root/solr/config/
  args:
    creates: /var/solr/data/blacklight-core/core.properties
  become: yes
  become_user: solr

- name: Let puma user write to tmp directory
  file:
    path: /var/www/hyrax/hyrax-root/tmp
    owner: hyrax
    group: puma
    mode: u=rwX,g=rwX,o=rX
    recurse: yes

# Install and activate services

- name: Copy sidekiq service file
  template:
    src: sidekiq.service
    dest: /etc/systemd/system/sidekiq.service
    owner: root
    group: root
    mode: a=r

- name: Copy puma service file
  template:
    src: puma.service
    dest: /etc/systemd/system/puma.service
    owner: root
    group: root
    mode: a=r

- name: Reload systemd daemons
  command: systemctl daemon-reload
  changed_when: False

- name: Restart and enable sidekiq
  service:
    name: sidekiq
    state: restarted
    enabled: yes

- name: Restart and enable puma
  service:
    name: puma
    state: restarted
    enabled: yes

# SELinux tweaking

- name: Install policycoreutils-python [CentOS]
  package:
    name: policycoreutils-python
    state: present
  when: ansible_distribution == "CentOS"

- name: setsebool -P httpd_can_network_connect 1 [CentOS]
  command: setsebool -P httpd_can_network_connect 1
  changed_when: False
  when: ansible_distribution == "CentOS"

- name: setsebool httpd_can_network_connect 1 [CentOS]
  command: setsebool httpd_can_network_connect 1
  changed_when: False
  when: ansible_distribution == "CentOS"

- name: Run restorecon on public files
  command: restorecon -R /var/www/hyrax/hyrax-root/public
  changed_when: False
  when: ansible_distribution == "CentOS"

# Make the new Hyrax instance available using Nginx.

- name: Copy the hyrax nginx conf
  template:
    src: hyrax.conf
    dest: /etc/nginx/conf.d/hyrax.conf
    mode: a=r
    owner: root
    group: root
  notify: restart nginx

# Backups and fixity check

- name: Ensure the hyrax log directory exists.
  file:
    path: /var/log/hyrax
    state: directory
    owner: root
    group: root
    mode: u=rwX,g=rwX,o=

- name: Copy fixity check script
  template:
    src: hyrax_fixity_check.sh
    dest: /etc/cron.weekly/hyrax_fixity_check.sh
    owner: root
    group: root
    mode: u=rx,g=,o=

- name: Ensure the backups directory exists.
  file:
    path: "{{ hyrax_backups_directory }}"
    state: directory
    owner: root
    group: root
    mode: u=rwX,g=rwX,o=rX

- name: Ensure the current backup directory exists.
  file:
    path: "{{ hyrax_backups_directory}}/current"
    state: directory
    owner: root
    group: root
    mode: u=rwX,g=rwX,o=rX

- name: Ensure the fcrepo backup directory exists.
  file:
    path: "{{ hyrax_backups_directory }}/current/fcrepo"
    state: directory
    owner: root
    group: "{{ tomcat_user }}"
    mode: u=rwX,g=rwX,o=

- name: Ensure the postgres backup directory exists.
  file:
    path: "{{ hyrax_backups_directory }}/current/postgres"
    state: directory
    owner: root
    group: postgres
    mode: u=rwX,g=rwX,o=

- name: Ensure the redis backup directory exists.
  file:
    path: "{{ hyrax_backups_directory }}/current/redis"
    state: directory
    owner: root
    group: root
    mode: u=rwX,go=

- name: Ensure the hyrax backup directory exists.
  file:
    path: "{{ hyrax_backups_directory }}/current/hyrax"
    state: directory
    owner: root
    group: root
    mode: u=rwX,go=

- name: Ensure the daily backup directory exists.
  file:
    path: "{{ hyrax_backups_directory}}/daily"
    state: directory
    owner: root
    group: root
    mode: u=rwX,go=

- name: Ensure the weekly backup directory exists.
  file:
    path: "{{ hyrax_backups_directory}}/weekly"
    state: directory
    owner: root
    group: root
    mode: u=rwX,go=

- name: Ensure the monthly backup directory exists.
  file:
    path: "{{ hyrax_backups_directory}}/monthly"
    state: directory
    owner: root
    group: root
    mode: u=rwX,go=

- name: Copy backup script to cron.daily
  template:
    src: hyrax_daily_backup.sh
    dest: /etc/cron.daily/hyrax_daily_backup.sh
    owner: root
    group: root
    mode: u=rx,go=

- name: Copy weekly backup script to cron.weekly
  template:
    src: hyrax_copy_weekly_backup.sh
    dest: /etc/cron.weekly/hyrax_copy_weekly_backup.sh
    owner: root
    group: root
    mode: u=rx,go=

- name: Copy monthly backup script to cron.monthly
  template:
    src: hyrax_copy_monthly_backup.sh
    dest: /etc/cron.monthly/hyrax_copy_monthly_backup.sh
    owner: root
    group: root
    mode: u=rx,go=

- name: Ensure logrotate is installed
  package:
    name: logrotate
    state: present

- name: Copy logrotate script to /etc/logrotate.d
  template:
    src: hyraxlogrotate
    dest: /etc/logrotate.d/hyrax
    owner: root
    group: root
    mode: u=rw,g=r,o=r
